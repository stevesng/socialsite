/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2007-2008 Sun Microsystems, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common Development
 * and Distribution License("CDDL") (collectively, the "License").  You
 * may not use this file except in compliance with the License. You can obtain
 * a copy of the License at https://socialsite.dev.java.net/legal/CDDL+GPL.html
 * or legal/LICENSE.txt.  See the License for the specific language governing
 * permissions and limitations under the License.
 *
 * When distributing the software, include this License Header Notice in each
 * file and include the License file at legal/LICENSE.txt.  Sun designates this
 * particular file as subject to the "Classpath" exception as provided by Sun
 * in the GPL Version 2 section of the License file that accompanied this code.
 * If applicable, add the following below the License Header, with the fields
 * enclosed by brackets [] replaced by your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * Contributor(s):
 *
 * If you wish your version of this file to be governed by only the CDDL or
 * only the GPL Version 2, indicate your decision by adding "[Contributor]
 * elects to include this software in this distribution under the [CDDL or GPL
 * Version 2] license."  If you don't indicate a single choice of license, a
 * recipient has the option to distribute your version of this file under
 * either the CDDL, the GPL Version 2 or to extend the choice of license to
 * its licensees as provided above.  However, if you add GPL Version 2 code
 * and therefore, elected the GPL Version 2 license, then the option applies
 * only if the new code is made subject to such option by the copyright
 * holder.
 */

package com.sun.socialsite.pojos;

import com.sun.socialsite.business.impl.JPAListenerManagerImpl;
import java.io.Serializable;
import java.sql.Timestamp;
import java.util.UUID;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EntityListeners;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.Table;
import javax.persistence.Version;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;


/**
 * Represents a Google app registration.
 */
@Entity
@Table(name ="ss_appreg")
@EntityListeners({JPAListenerManagerImpl.Listener.class})
@NamedQueries({
    @NamedQuery(name="AppRegistration.getAll",
        query="SELECT a FROM AppRegistration a ORDER BY a.updated ASC"),

    @NamedQuery(name="AppRegistration.getByURL",
        query="SELECT a FROM AppRegistration a WHERE a.appUrl=?1"),

    @NamedQuery(name="AppRegistration.getByConsumerKey",
        query="SELECT a FROM AppRegistration a WHERE a.consumerKey=?1"),

    @NamedQuery(name="AppRegistration.getByProfile",
        query="SELECT a FROM AppRegistration a WHERE a.profile=?1 ORDER BY a.updated ASC"),

    @NamedQuery(name="AppRegistration.getByStatus",
        query="SELECT a FROM AppRegistration a WHERE a.status=?1 ORDER BY a.updated ASC"),

    @NamedQuery(name="AppRegistration.getByProfileAndStatus",
        query="SELECT a FROM AppRegistration a WHERE a.profile=?1 AND a.status=?2 ORDER BY a.updated ASC")
})
public class AppRegistration implements Serializable {
    private static Log log = LogFactory.getLog(AppRegistration.class);

    @Id
    @Column(nullable=false,updatable=false)
    private String id = UUID.randomUUID().toString();

    private Timestamp created = new Timestamp(System.currentTimeMillis());

    @Version
    private Timestamp updated = new Timestamp(created.getTime());

    private String comment;

    private String status;

    private String serviceName;


    /** Owner of registration */
    @ManyToOne
    @JoinColumn(name="profileid")
    private Profile profile;

    /** Gadget spec URL */
    private String appUrl;

    /** OAuth consumer key, provided by gadget developer  */
    private String consumerKey;

    /** OAuth consumer secret, generated by SocailSite */
    private String consumerSecret;

    //------------------------------------------------------- Good citizenship

    @Override
    public String toString() {
        return String.format("%s[url=%s]", getClass().getSimpleName(), this.getAppUrl());
    }

    @Override
    public boolean equals(Object other) {
        if (other == this) return true;
        if (other instanceof AppRegistration != true) return false;
        AppRegistration o = (AppRegistration)other;
        return new EqualsBuilder().append(getAppUrl(), o.getAppUrl()).isEquals();
    }

    @Override
    public int hashCode() {
        return new HashCodeBuilder().append(getAppUrl()).toHashCode();
    }

    /**
     * @return the id
     */
    public String getId() {
        return id;
    }

    /**
     * @param id the id to set
     */
    public void setId(String id) {
        this.id = id;
    }

    /**
     * @return the created
     */
    public Timestamp getCreated() {
        return created;
    }

    /**
     * @param created the created to set
     */
    public void setCreated(Timestamp created) {
        this.created = created;
    }

    /**
     * @return the updated
     */
    public Timestamp getUpdated() {
        return updated;
    }

    /**
     * @param updated the updated to set
     */
    public void setUpdated(Timestamp updated) {
        this.updated = updated;
    }

    /**
     * @return the profile
     */
    public Profile getProfile() {
        return profile;
    }

    /**
     * @param profileid the profile to set
     */
    public void setProfile(Profile profile) {
        this.profile = profile;
    }

    /**
     * @return the app URL
     */
    public String getAppUrl() {
        return  appUrl;
    }

    /**
     * @param appUrl the app URL to set
     */
    public void setAppUrl(String appUrl) {
        this. appUrl = appUrl;
    }

    /**
     * @return the consumerSecret
     */
    public String getConsumerSecret() {
        return consumerSecret;
    }

    /**
     * @param consumerSecret the consumerSecret to set
     */
    public void setConsumerSecret(String consumerSecret) {
        this.consumerSecret = consumerSecret;
    }

    /**
     * @return the comment
     */
    public String getComment() {
        return comment;
    }

    /**
     * @param comment the comment to set
     */
    public void setComment(String comment) {
        this.comment = comment;
    }

    /**
     * Status is PENDING, APPROVED, REJECTED or null
     * @return the status
     */
    public String getStatus() {
        return status;
    }

    /**
     * Status is PENDING, APPROVED, REJECTED or null
     * @param status the status to set
     */
    public void setStatus(String status) {
        this.status = status;
    }

    /**
     * @return the consumerkey
     */
    public String getConsumerKey() {
        return consumerKey;
    }

    /**
     * @param consumerkey the consumerkey to set
     */
    public void setConsumerKey(String consumerkey) {
        this.consumerKey = consumerkey;
    }

    /**
     * @return the serviceName
     */
    public String getServiceName() {
        return serviceName;
    }

    /**
     * @param serviceName the serviceName to set
     */
    public void setServiceName(String serviceName) {
        this.serviceName = serviceName;
    }
}

